!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A0	inc/pins_arduino.h	/^static const uint8_t A0 = PIN_A0;$/;"	v
A1	inc/pins_arduino.h	/^static const uint8_t A1 = PIN_A1;$/;"	v
A10	inc/pins_arduino.h	/^static const uint8_t A10 = PIN_A10; \/\/ D10$/;"	v
A11	inc/pins_arduino.h	/^static const uint8_t A11 = PIN_A11; \/\/ D12$/;"	v
A2	inc/pins_arduino.h	/^static const uint8_t A2 = PIN_A2;$/;"	v
A3	inc/pins_arduino.h	/^static const uint8_t A3 = PIN_A3;$/;"	v
A4	inc/pins_arduino.h	/^static const uint8_t A4 = PIN_A4;$/;"	v
A5	inc/pins_arduino.h	/^static const uint8_t A5 = PIN_A5;$/;"	v
A6	inc/pins_arduino.h	/^static const uint8_t A6 = PIN_A6; \/\/ D4$/;"	v
A7	inc/pins_arduino.h	/^static const uint8_t A7 = PIN_A7; \/\/ D6$/;"	v
A8	inc/pins_arduino.h	/^static const uint8_t A8 = PIN_A8; \/\/ D8$/;"	v
A9	inc/pins_arduino.h	/^static const uint8_t A9 = PIN_A9; \/\/ D9$/;"	v
ACCEL_X_PIN	Esplora.cpp	/^const byte ACCEL_X_PIN = A5;$/;"	v
ACCEL_Y_PIN	Esplora.cpp	/^const byte ACCEL_Y_PIN = A11;$/;"	v
ACCEL_Z_PIN	Esplora.cpp	/^const byte ACCEL_Z_PIN = A6;$/;"	v
ARDUINO_H_	inc/Arduino.h	21;"	d
B0	inc/binary.h	22;"	d
B00	inc/binary.h	23;"	d
B000	inc/binary.h	24;"	d
B0000	inc/binary.h	25;"	d
B00000	inc/binary.h	26;"	d
B000000	inc/binary.h	27;"	d
B0000000	inc/binary.h	28;"	d
B00000000	inc/binary.h	29;"	d
B00000001	inc/binary.h	37;"	d
B0000001	inc/binary.h	36;"	d
B00000010	inc/binary.h	44;"	d
B00000011	inc/binary.h	51;"	d
B000001	inc/binary.h	35;"	d
B0000010	inc/binary.h	43;"	d
B00000100	inc/binary.h	57;"	d
B00000101	inc/binary.h	63;"	d
B0000011	inc/binary.h	50;"	d
B00000110	inc/binary.h	69;"	d
B00000111	inc/binary.h	75;"	d
B00001	inc/binary.h	34;"	d
B000010	inc/binary.h	42;"	d
B0000100	inc/binary.h	56;"	d
B00001000	inc/binary.h	80;"	d
B00001001	inc/binary.h	85;"	d
B0000101	inc/binary.h	62;"	d
B00001010	inc/binary.h	90;"	d
B00001011	inc/binary.h	95;"	d
B000011	inc/binary.h	49;"	d
B0000110	inc/binary.h	68;"	d
B00001100	inc/binary.h	100;"	d
B00001101	inc/binary.h	105;"	d
B0000111	inc/binary.h	74;"	d
B00001110	inc/binary.h	110;"	d
B00001111	inc/binary.h	115;"	d
B0001	inc/binary.h	33;"	d
B00010	inc/binary.h	41;"	d
B000100	inc/binary.h	55;"	d
B0001000	inc/binary.h	79;"	d
B00010000	inc/binary.h	119;"	d
B00010001	inc/binary.h	123;"	d
B0001001	inc/binary.h	84;"	d
B00010010	inc/binary.h	127;"	d
B00010011	inc/binary.h	131;"	d
B000101	inc/binary.h	61;"	d
B0001010	inc/binary.h	89;"	d
B00010100	inc/binary.h	135;"	d
B00010101	inc/binary.h	139;"	d
B0001011	inc/binary.h	94;"	d
B00010110	inc/binary.h	143;"	d
B00010111	inc/binary.h	147;"	d
B00011	inc/binary.h	48;"	d
B000110	inc/binary.h	67;"	d
B0001100	inc/binary.h	99;"	d
B00011000	inc/binary.h	151;"	d
B00011001	inc/binary.h	155;"	d
B0001101	inc/binary.h	104;"	d
B00011010	inc/binary.h	159;"	d
B00011011	inc/binary.h	163;"	d
B000111	inc/binary.h	73;"	d
B0001110	inc/binary.h	109;"	d
B00011100	inc/binary.h	167;"	d
B00011101	inc/binary.h	171;"	d
B0001111	inc/binary.h	114;"	d
B00011110	inc/binary.h	175;"	d
B00011111	inc/binary.h	179;"	d
B001	inc/binary.h	32;"	d
B0010	inc/binary.h	40;"	d
B00100	inc/binary.h	54;"	d
B001000	inc/binary.h	78;"	d
B0010000	inc/binary.h	118;"	d
B00100000	inc/binary.h	182;"	d
B00100001	inc/binary.h	185;"	d
B0010001	inc/binary.h	122;"	d
B00100010	inc/binary.h	188;"	d
B00100011	inc/binary.h	191;"	d
B001001	inc/binary.h	83;"	d
B0010010	inc/binary.h	126;"	d
B00100100	inc/binary.h	194;"	d
B00100101	inc/binary.h	197;"	d
B0010011	inc/binary.h	130;"	d
B00100110	inc/binary.h	200;"	d
B00100111	inc/binary.h	203;"	d
B00101	inc/binary.h	60;"	d
B001010	inc/binary.h	88;"	d
B0010100	inc/binary.h	134;"	d
B00101000	inc/binary.h	206;"	d
B00101001	inc/binary.h	209;"	d
B0010101	inc/binary.h	138;"	d
B00101010	inc/binary.h	212;"	d
B00101011	inc/binary.h	215;"	d
B001011	inc/binary.h	93;"	d
B0010110	inc/binary.h	142;"	d
B00101100	inc/binary.h	218;"	d
B00101101	inc/binary.h	221;"	d
B0010111	inc/binary.h	146;"	d
B00101110	inc/binary.h	224;"	d
B00101111	inc/binary.h	227;"	d
B0011	inc/binary.h	47;"	d
B00110	inc/binary.h	66;"	d
B001100	inc/binary.h	98;"	d
B0011000	inc/binary.h	150;"	d
B00110000	inc/binary.h	230;"	d
B00110001	inc/binary.h	233;"	d
B0011001	inc/binary.h	154;"	d
B00110010	inc/binary.h	236;"	d
B00110011	inc/binary.h	239;"	d
B001101	inc/binary.h	103;"	d
B0011010	inc/binary.h	158;"	d
B00110100	inc/binary.h	242;"	d
B00110101	inc/binary.h	245;"	d
B0011011	inc/binary.h	162;"	d
B00110110	inc/binary.h	248;"	d
B00110111	inc/binary.h	251;"	d
B00111	inc/binary.h	72;"	d
B001110	inc/binary.h	108;"	d
B0011100	inc/binary.h	166;"	d
B00111000	inc/binary.h	254;"	d
B00111001	inc/binary.h	257;"	d
B0011101	inc/binary.h	170;"	d
B00111010	inc/binary.h	260;"	d
B00111011	inc/binary.h	263;"	d
B001111	inc/binary.h	113;"	d
B0011110	inc/binary.h	174;"	d
B00111100	inc/binary.h	266;"	d
B00111101	inc/binary.h	269;"	d
B0011111	inc/binary.h	178;"	d
B00111110	inc/binary.h	272;"	d
B00111111	inc/binary.h	275;"	d
B01	inc/binary.h	31;"	d
B010	inc/binary.h	39;"	d
B0100	inc/binary.h	53;"	d
B01000	inc/binary.h	77;"	d
B010000	inc/binary.h	117;"	d
B0100000	inc/binary.h	181;"	d
B01000000	inc/binary.h	277;"	d
B01000001	inc/binary.h	279;"	d
B0100001	inc/binary.h	184;"	d
B01000010	inc/binary.h	281;"	d
B01000011	inc/binary.h	283;"	d
B010001	inc/binary.h	121;"	d
B0100010	inc/binary.h	187;"	d
B01000100	inc/binary.h	285;"	d
B01000101	inc/binary.h	287;"	d
B0100011	inc/binary.h	190;"	d
B01000110	inc/binary.h	289;"	d
B01000111	inc/binary.h	291;"	d
B01001	inc/binary.h	82;"	d
B010010	inc/binary.h	125;"	d
B0100100	inc/binary.h	193;"	d
B01001000	inc/binary.h	293;"	d
B01001001	inc/binary.h	295;"	d
B0100101	inc/binary.h	196;"	d
B01001010	inc/binary.h	297;"	d
B01001011	inc/binary.h	299;"	d
B010011	inc/binary.h	129;"	d
B0100110	inc/binary.h	199;"	d
B01001100	inc/binary.h	301;"	d
B01001101	inc/binary.h	303;"	d
B0100111	inc/binary.h	202;"	d
B01001110	inc/binary.h	305;"	d
B01001111	inc/binary.h	307;"	d
B0101	inc/binary.h	59;"	d
B01010	inc/binary.h	87;"	d
B010100	inc/binary.h	133;"	d
B0101000	inc/binary.h	205;"	d
B01010000	inc/binary.h	309;"	d
B01010001	inc/binary.h	311;"	d
B0101001	inc/binary.h	208;"	d
B01010010	inc/binary.h	313;"	d
B01010011	inc/binary.h	315;"	d
B010101	inc/binary.h	137;"	d
B0101010	inc/binary.h	211;"	d
B01010100	inc/binary.h	317;"	d
B01010101	inc/binary.h	319;"	d
B0101011	inc/binary.h	214;"	d
B01010110	inc/binary.h	321;"	d
B01010111	inc/binary.h	323;"	d
B01011	inc/binary.h	92;"	d
B010110	inc/binary.h	141;"	d
B0101100	inc/binary.h	217;"	d
B01011000	inc/binary.h	325;"	d
B01011001	inc/binary.h	327;"	d
B0101101	inc/binary.h	220;"	d
B01011010	inc/binary.h	329;"	d
B01011011	inc/binary.h	331;"	d
B010111	inc/binary.h	145;"	d
B0101110	inc/binary.h	223;"	d
B01011100	inc/binary.h	333;"	d
B01011101	inc/binary.h	335;"	d
B0101111	inc/binary.h	226;"	d
B01011110	inc/binary.h	337;"	d
B01011111	inc/binary.h	339;"	d
B011	inc/binary.h	46;"	d
B0110	inc/binary.h	65;"	d
B01100	inc/binary.h	97;"	d
B011000	inc/binary.h	149;"	d
B0110000	inc/binary.h	229;"	d
B01100000	inc/binary.h	341;"	d
B01100001	inc/binary.h	343;"	d
B0110001	inc/binary.h	232;"	d
B01100010	inc/binary.h	345;"	d
B01100011	inc/binary.h	347;"	d
B011001	inc/binary.h	153;"	d
B0110010	inc/binary.h	235;"	d
B01100100	inc/binary.h	349;"	d
B01100101	inc/binary.h	351;"	d
B0110011	inc/binary.h	238;"	d
B01100110	inc/binary.h	353;"	d
B01100111	inc/binary.h	355;"	d
B01101	inc/binary.h	102;"	d
B011010	inc/binary.h	157;"	d
B0110100	inc/binary.h	241;"	d
B01101000	inc/binary.h	357;"	d
B01101001	inc/binary.h	359;"	d
B0110101	inc/binary.h	244;"	d
B01101010	inc/binary.h	361;"	d
B01101011	inc/binary.h	363;"	d
B011011	inc/binary.h	161;"	d
B0110110	inc/binary.h	247;"	d
B01101100	inc/binary.h	365;"	d
B01101101	inc/binary.h	367;"	d
B0110111	inc/binary.h	250;"	d
B01101110	inc/binary.h	369;"	d
B01101111	inc/binary.h	371;"	d
B0111	inc/binary.h	71;"	d
B01110	inc/binary.h	107;"	d
B011100	inc/binary.h	165;"	d
B0111000	inc/binary.h	253;"	d
B01110000	inc/binary.h	373;"	d
B01110001	inc/binary.h	375;"	d
B0111001	inc/binary.h	256;"	d
B01110010	inc/binary.h	377;"	d
B01110011	inc/binary.h	379;"	d
B011101	inc/binary.h	169;"	d
B0111010	inc/binary.h	259;"	d
B01110100	inc/binary.h	381;"	d
B01110101	inc/binary.h	383;"	d
B0111011	inc/binary.h	262;"	d
B01110110	inc/binary.h	385;"	d
B01110111	inc/binary.h	387;"	d
B01111	inc/binary.h	112;"	d
B011110	inc/binary.h	173;"	d
B0111100	inc/binary.h	265;"	d
B01111000	inc/binary.h	389;"	d
B01111001	inc/binary.h	391;"	d
B0111101	inc/binary.h	268;"	d
B01111010	inc/binary.h	393;"	d
B01111011	inc/binary.h	395;"	d
B011111	inc/binary.h	177;"	d
B0111110	inc/binary.h	271;"	d
B01111100	inc/binary.h	397;"	d
B01111101	inc/binary.h	399;"	d
B0111111	inc/binary.h	274;"	d
B01111110	inc/binary.h	401;"	d
B01111111	inc/binary.h	403;"	d
B1	inc/binary.h	30;"	d
B10	inc/binary.h	38;"	d
B100	inc/binary.h	52;"	d
B1000	inc/binary.h	76;"	d
B10000	inc/binary.h	116;"	d
B100000	inc/binary.h	180;"	d
B1000000	inc/binary.h	276;"	d
B10000000	inc/binary.h	404;"	d
B10000001	inc/binary.h	405;"	d
B1000001	inc/binary.h	278;"	d
B10000010	inc/binary.h	406;"	d
B10000011	inc/binary.h	407;"	d
B100001	inc/binary.h	183;"	d
B1000010	inc/binary.h	280;"	d
B10000100	inc/binary.h	408;"	d
B10000101	inc/binary.h	409;"	d
B1000011	inc/binary.h	282;"	d
B10000110	inc/binary.h	410;"	d
B10000111	inc/binary.h	411;"	d
B10001	inc/binary.h	120;"	d
B100010	inc/binary.h	186;"	d
B1000100	inc/binary.h	284;"	d
B10001000	inc/binary.h	412;"	d
B10001001	inc/binary.h	413;"	d
B1000101	inc/binary.h	286;"	d
B10001010	inc/binary.h	414;"	d
B10001011	inc/binary.h	415;"	d
B100011	inc/binary.h	189;"	d
B1000110	inc/binary.h	288;"	d
B10001100	inc/binary.h	416;"	d
B10001101	inc/binary.h	417;"	d
B1000111	inc/binary.h	290;"	d
B10001110	inc/binary.h	418;"	d
B10001111	inc/binary.h	419;"	d
B1001	inc/binary.h	81;"	d
B10010	inc/binary.h	124;"	d
B100100	inc/binary.h	192;"	d
B1001000	inc/binary.h	292;"	d
B10010000	inc/binary.h	420;"	d
B10010001	inc/binary.h	421;"	d
B1001001	inc/binary.h	294;"	d
B10010010	inc/binary.h	422;"	d
B10010011	inc/binary.h	423;"	d
B100101	inc/binary.h	195;"	d
B1001010	inc/binary.h	296;"	d
B10010100	inc/binary.h	424;"	d
B10010101	inc/binary.h	425;"	d
B1001011	inc/binary.h	298;"	d
B10010110	inc/binary.h	426;"	d
B10010111	inc/binary.h	427;"	d
B10011	inc/binary.h	128;"	d
B100110	inc/binary.h	198;"	d
B1001100	inc/binary.h	300;"	d
B10011000	inc/binary.h	428;"	d
B10011001	inc/binary.h	429;"	d
B1001101	inc/binary.h	302;"	d
B10011010	inc/binary.h	430;"	d
B10011011	inc/binary.h	431;"	d
B100111	inc/binary.h	201;"	d
B1001110	inc/binary.h	304;"	d
B10011100	inc/binary.h	432;"	d
B10011101	inc/binary.h	433;"	d
B1001111	inc/binary.h	306;"	d
B10011110	inc/binary.h	434;"	d
B10011111	inc/binary.h	435;"	d
B101	inc/binary.h	58;"	d
B1010	inc/binary.h	86;"	d
B10100	inc/binary.h	132;"	d
B101000	inc/binary.h	204;"	d
B1010000	inc/binary.h	308;"	d
B10100000	inc/binary.h	436;"	d
B10100001	inc/binary.h	437;"	d
B1010001	inc/binary.h	310;"	d
B10100010	inc/binary.h	438;"	d
B10100011	inc/binary.h	439;"	d
B101001	inc/binary.h	207;"	d
B1010010	inc/binary.h	312;"	d
B10100100	inc/binary.h	440;"	d
B10100101	inc/binary.h	441;"	d
B1010011	inc/binary.h	314;"	d
B10100110	inc/binary.h	442;"	d
B10100111	inc/binary.h	443;"	d
B10101	inc/binary.h	136;"	d
B101010	inc/binary.h	210;"	d
B1010100	inc/binary.h	316;"	d
B10101000	inc/binary.h	444;"	d
B10101001	inc/binary.h	445;"	d
B1010101	inc/binary.h	318;"	d
B10101010	inc/binary.h	446;"	d
B10101011	inc/binary.h	447;"	d
B101011	inc/binary.h	213;"	d
B1010110	inc/binary.h	320;"	d
B10101100	inc/binary.h	448;"	d
B10101101	inc/binary.h	449;"	d
B1010111	inc/binary.h	322;"	d
B10101110	inc/binary.h	450;"	d
B10101111	inc/binary.h	451;"	d
B1011	inc/binary.h	91;"	d
B10110	inc/binary.h	140;"	d
B101100	inc/binary.h	216;"	d
B1011000	inc/binary.h	324;"	d
B10110000	inc/binary.h	452;"	d
B10110001	inc/binary.h	453;"	d
B1011001	inc/binary.h	326;"	d
B10110010	inc/binary.h	454;"	d
B10110011	inc/binary.h	455;"	d
B101101	inc/binary.h	219;"	d
B1011010	inc/binary.h	328;"	d
B10110100	inc/binary.h	456;"	d
B10110101	inc/binary.h	457;"	d
B1011011	inc/binary.h	330;"	d
B10110110	inc/binary.h	458;"	d
B10110111	inc/binary.h	459;"	d
B10111	inc/binary.h	144;"	d
B101110	inc/binary.h	222;"	d
B1011100	inc/binary.h	332;"	d
B10111000	inc/binary.h	460;"	d
B10111001	inc/binary.h	461;"	d
B1011101	inc/binary.h	334;"	d
B10111010	inc/binary.h	462;"	d
B10111011	inc/binary.h	463;"	d
B101111	inc/binary.h	225;"	d
B1011110	inc/binary.h	336;"	d
B10111100	inc/binary.h	464;"	d
B10111101	inc/binary.h	465;"	d
B1011111	inc/binary.h	338;"	d
B10111110	inc/binary.h	466;"	d
B10111111	inc/binary.h	467;"	d
B11	inc/binary.h	45;"	d
B110	inc/binary.h	64;"	d
B1100	inc/binary.h	96;"	d
B11000	inc/binary.h	148;"	d
B110000	inc/binary.h	228;"	d
B1100000	inc/binary.h	340;"	d
B11000000	inc/binary.h	468;"	d
B11000001	inc/binary.h	469;"	d
B1100001	inc/binary.h	342;"	d
B11000010	inc/binary.h	470;"	d
B11000011	inc/binary.h	471;"	d
B110001	inc/binary.h	231;"	d
B1100010	inc/binary.h	344;"	d
B11000100	inc/binary.h	472;"	d
B11000101	inc/binary.h	473;"	d
B1100011	inc/binary.h	346;"	d
B11000110	inc/binary.h	474;"	d
B11000111	inc/binary.h	475;"	d
B11001	inc/binary.h	152;"	d
B110010	inc/binary.h	234;"	d
B1100100	inc/binary.h	348;"	d
B11001000	inc/binary.h	476;"	d
B11001001	inc/binary.h	477;"	d
B1100101	inc/binary.h	350;"	d
B11001010	inc/binary.h	478;"	d
B11001011	inc/binary.h	479;"	d
B110011	inc/binary.h	237;"	d
B1100110	inc/binary.h	352;"	d
B11001100	inc/binary.h	480;"	d
B11001101	inc/binary.h	481;"	d
B1100111	inc/binary.h	354;"	d
B11001110	inc/binary.h	482;"	d
B11001111	inc/binary.h	483;"	d
B1101	inc/binary.h	101;"	d
B11010	inc/binary.h	156;"	d
B110100	inc/binary.h	240;"	d
B1101000	inc/binary.h	356;"	d
B11010000	inc/binary.h	484;"	d
B11010001	inc/binary.h	485;"	d
B1101001	inc/binary.h	358;"	d
B11010010	inc/binary.h	486;"	d
B11010011	inc/binary.h	487;"	d
B110101	inc/binary.h	243;"	d
B1101010	inc/binary.h	360;"	d
B11010100	inc/binary.h	488;"	d
B11010101	inc/binary.h	489;"	d
B1101011	inc/binary.h	362;"	d
B11010110	inc/binary.h	490;"	d
B11010111	inc/binary.h	491;"	d
B11011	inc/binary.h	160;"	d
B110110	inc/binary.h	246;"	d
B1101100	inc/binary.h	364;"	d
B11011000	inc/binary.h	492;"	d
B11011001	inc/binary.h	493;"	d
B1101101	inc/binary.h	366;"	d
B11011010	inc/binary.h	494;"	d
B11011011	inc/binary.h	495;"	d
B110111	inc/binary.h	249;"	d
B1101110	inc/binary.h	368;"	d
B11011100	inc/binary.h	496;"	d
B11011101	inc/binary.h	497;"	d
B1101111	inc/binary.h	370;"	d
B11011110	inc/binary.h	498;"	d
B11011111	inc/binary.h	499;"	d
B111	inc/binary.h	70;"	d
B1110	inc/binary.h	106;"	d
B11100	inc/binary.h	164;"	d
B111000	inc/binary.h	252;"	d
B1110000	inc/binary.h	372;"	d
B11100000	inc/binary.h	500;"	d
B11100001	inc/binary.h	501;"	d
B1110001	inc/binary.h	374;"	d
B11100010	inc/binary.h	502;"	d
B11100011	inc/binary.h	503;"	d
B111001	inc/binary.h	255;"	d
B1110010	inc/binary.h	376;"	d
B11100100	inc/binary.h	504;"	d
B11100101	inc/binary.h	505;"	d
B1110011	inc/binary.h	378;"	d
B11100110	inc/binary.h	506;"	d
B11100111	inc/binary.h	507;"	d
B11101	inc/binary.h	168;"	d
B111010	inc/binary.h	258;"	d
B1110100	inc/binary.h	380;"	d
B11101000	inc/binary.h	508;"	d
B11101001	inc/binary.h	509;"	d
B1110101	inc/binary.h	382;"	d
B11101010	inc/binary.h	510;"	d
B11101011	inc/binary.h	511;"	d
B111011	inc/binary.h	261;"	d
B1110110	inc/binary.h	384;"	d
B11101100	inc/binary.h	512;"	d
B11101101	inc/binary.h	513;"	d
B1110111	inc/binary.h	386;"	d
B11101110	inc/binary.h	514;"	d
B11101111	inc/binary.h	515;"	d
B1111	inc/binary.h	111;"	d
B11110	inc/binary.h	172;"	d
B111100	inc/binary.h	264;"	d
B1111000	inc/binary.h	388;"	d
B11110000	inc/binary.h	516;"	d
B11110001	inc/binary.h	517;"	d
B1111001	inc/binary.h	390;"	d
B11110010	inc/binary.h	518;"	d
B11110011	inc/binary.h	519;"	d
B111101	inc/binary.h	267;"	d
B1111010	inc/binary.h	392;"	d
B11110100	inc/binary.h	520;"	d
B11110101	inc/binary.h	521;"	d
B1111011	inc/binary.h	394;"	d
B11110110	inc/binary.h	522;"	d
B11110111	inc/binary.h	523;"	d
B11111	inc/binary.h	176;"	d
B111110	inc/binary.h	270;"	d
B1111100	inc/binary.h	396;"	d
B11111000	inc/binary.h	524;"	d
B11111001	inc/binary.h	525;"	d
B1111101	inc/binary.h	398;"	d
B11111010	inc/binary.h	526;"	d
B11111011	inc/binary.h	527;"	d
B111111	inc/binary.h	273;"	d
B1111110	inc/binary.h	400;"	d
B11111100	inc/binary.h	528;"	d
B11111101	inc/binary.h	529;"	d
B1111111	inc/binary.h	402;"	d
B11111110	inc/binary.h	530;"	d
B11111111	inc/binary.h	531;"	d
BIN	inc/Arduino.h	35;"	d
BIN	inc/Print.h	31;"	d
BINARY_H_	inc/binary.h	20;"	d
BLUE_PIN	Esplora.cpp	/^const byte BLUE_PIN   = 9;$/;"	v
BUFFER_INITIALISER	json/buffer.c	/^const struct buffer BUFFER_INITIALISER = {0, 0, NULL};$/;"	v	typeref:struct:buffer
BUZZER_PIN	Esplora.cpp	/^const byte BUZZER_PIN = 6;$/;"	v
BYTE	inc/Print.h	32;"	d
CHANGE	inc/wiring.h	53;"	d
CHARACTER_H_	inc/WCharacter.h	21;"	d
CH_JOYSTICK_SW	inc/Esplora.h	/^const byte CH_JOYSTICK_SW = 10;$/;"	v
CH_JOYSTICK_X	inc/Esplora.h	/^const byte CH_JOYSTICK_X  = 11;$/;"	v
CH_JOYSTICK_Y	inc/Esplora.h	/^const byte CH_JOYSTICK_Y  = 12;$/;"	v
CH_LIGHT	inc/Esplora.h	/^const byte CH_LIGHT       = 5;$/;"	v
CH_MIC	inc/Esplora.h	/^const byte CH_MIC         = 7;$/;"	v
CH_SLIDER	inc/Esplora.h	/^const byte CH_SLIDER      = 4;$/;"	v
CH_SWITCH_1	inc/Esplora.h	/^const byte CH_SWITCH_1    = 0;$/;"	v
CH_SWITCH_2	inc/Esplora.h	/^const byte CH_SWITCH_2    = 1;$/;"	v
CH_SWITCH_3	inc/Esplora.h	/^const byte CH_SWITCH_3    = 2;$/;"	v
CH_SWITCH_4	inc/Esplora.h	/^const byte CH_SWITCH_4    = 3;$/;"	v
CH_TEMPERATURE	inc/Esplora.h	/^const byte CH_TEMPERATURE = 6;$/;"	v
CH_TINKERKIT_A	inc/Esplora.h	/^const byte CH_TINKERKIT_A = 8;$/;"	v
CH_TINKERKIT_B	inc/Esplora.h	/^const byte CH_TINKERKIT_B = 9;$/;"	v
CursesUI	utils/gui.py	/^class CursesUI:$/;"	c
DEBUG	inc/json/logging.h	45;"	d
DEBUG0	inc/json/logging.h	46;"	d
DEC	inc/Arduino.h	37;"	d
DEC	inc/Print.h	28;"	d
DEFAULT	inc/wiring.h	63;"	d
DEGREES_C	inc/Esplora.h	/^const byte DEGREES_C = 0;$/;"	v
DEGREES_F	inc/Esplora.h	/^const byte DEGREES_F = 1;$/;"	v
DEG_TO_RAD	inc/wiring.h	44;"	d
DEVICE_H_	inc/Device.h	2;"	d
DISPLAY	inc/wiring.h	48;"	d
ERROR	inc/json/logging.h	51;"	d
ERROR0	inc/json/logging.h	52;"	d
ESPLORA_H_	inc/Esplora.h	2;"	d
EXTERNAL	inc/wiring.h	64;"	d
Esplora	Main.cpp	/^_Esplora Esplora;$/;"	v
F	inc/WString.h	39;"	d
FALLING	inc/wiring.h	54;"	d
F_CPU	inc/wiring.h	67;"	d
GLOBS_H_	inc/global_variables.h	2;"	d
GPIO_PIN_INPUT_DOWN_HIGH	inc/Device.h	/^  GPIO_PIN_INPUT_DOWN_HIGH,$/;"	e	enum:PinState
GPIO_PIN_INPUT_DOWN_LOW	inc/Device.h	/^  GPIO_PIN_INPUT_DOWN_LOW,$/;"	e	enum:PinState
GPIO_PIN_INPUT_FLOATING	inc/Device.h	/^  GPIO_PIN_INPUT_FLOATING,$/;"	e	enum:PinState
GPIO_PIN_INPUT_FLOATING_HIGH	inc/Device.h	/^  GPIO_PIN_INPUT_FLOATING_HIGH,$/;"	e	enum:PinState
GPIO_PIN_INPUT_FLOATING_LOW	inc/Device.h	/^  GPIO_PIN_INPUT_FLOATING_LOW,$/;"	e	enum:PinState
GPIO_PIN_INPUT_UP_HIGH	inc/Device.h	/^  GPIO_PIN_INPUT_UP_HIGH,$/;"	e	enum:PinState
GPIO_PIN_INPUT_UP_LOW	inc/Device.h	/^  GPIO_PIN_INPUT_UP_LOW,$/;"	e	enum:PinState
GPIO_PIN_OUTPUT_HIGH	inc/Device.h	/^  GPIO_PIN_OUTPUT_HIGH, $/;"	e	enum:PinState
GPIO_PIN_OUTPUT_LOW	inc/Device.h	/^  GPIO_PIN_OUTPUT_LOW = 0,$/;"	e	enum:PinState
GPIO_PIN_OUTPUT_PWM	inc/Device.h	/^  GPIO_PIN_OUTPUT_PWM,$/;"	e	enum:PinState
GPIO_PIN_RESERVED	inc/Device.h	/^  GPIO_PIN_RESERVED,$/;"	e	enum:PinState
GREEN_PIN	Esplora.cpp	/^const byte GREEN_PIN  = 10;$/;"	v
GROW_NBYTES	json/buffer.c	10;"	d	file:
HALF_PI	inc/wiring.h	42;"	d
HEX	inc/Arduino.h	38;"	d
HEX	inc/Print.h	29;"	d
HIGH	inc/Arduino.h	31;"	d
HIGH	inc/wiring.h	34;"	d
INFO	inc/json/logging.h	47;"	d
INFO0	inc/json/logging.h	48;"	d
INPUT	inc/wiring.h	37;"	d
INPUT_PULLUP	inc/wiring.h	39;"	d
INTERNAL	inc/wiring.h	61;"	d
INTERNAL1V1	inc/wiring.h	58;"	d
INTERNAL2V56	inc/wiring.h	59;"	d
JOYSTICK_BASE	inc/Esplora.h	/^const byte JOYSTICK_BASE  = 16;$/;"	v
JOYSTICK_DEAD_ZONE	Esplora.cpp	/^const int JOYSTICK_DEAD_ZONE = 100;$/;"	v
JOYSTICK_DOWN	inc/Esplora.h	/^const byte JOYSTICK_DOWN  = JOYSTICK_BASE;$/;"	v
JOYSTICK_LEFT	inc/Esplora.h	/^const byte JOYSTICK_LEFT  = JOYSTICK_BASE+1;$/;"	v
JOYSTICK_RIGHT	inc/Esplora.h	/^const byte JOYSTICK_RIGHT = JOYSTICK_BASE+3;$/;"	v
JOYSTICK_UP	inc/Esplora.h	/^const byte JOYSTICK_UP    = JOYSTICK_BASE+2;$/;"	v
JSON_VALUE_TYPE_ARRAY	inc/json/json.h	/^  JSON_VALUE_TYPE_ARRAY,    \/\/!< A JSON array.$/;"	e	enum:json_value_type
JSON_VALUE_TYPE_BOOLEAN	inc/json/json.h	/^  JSON_VALUE_TYPE_BOOLEAN,  \/\/!< A JSON Boolean value.$/;"	e	enum:json_value_type
JSON_VALUE_TYPE_NULL	inc/json/json.h	/^  JSON_VALUE_TYPE_NULL,     \/\/!< The JSON `null` value.$/;"	e	enum:json_value_type
JSON_VALUE_TYPE_NUMBER	inc/json/json.h	/^  JSON_VALUE_TYPE_NUMBER,   \/\/!< A JSON number (64-bit double).$/;"	e	enum:json_value_type
JSON_VALUE_TYPE_OBJECT	inc/json/json.h	/^  JSON_VALUE_TYPE_OBJECT,   \/\/!< A JSON object (key\/value pairs).$/;"	e	enum:json_value_type
JSON_VALUE_TYPE_STRING	inc/json/json.h	/^  JSON_VALUE_TYPE_STRING,   \/\/!< A JSON string, encoded in UTF-8.$/;"	e	enum:json_value_type
LED_BUILTIN	inc/pins_arduino.h	43;"	d
LED_BUILTIN_RX	inc/pins_arduino.h	44;"	d
LED_BUILTIN_TX	inc/pins_arduino.h	45;"	d
LOGGING_LEVEL_DEBUG	inc/json/logging.h	/^  LOGGING_LEVEL_DEBUG,    \/\/!< DEBUG logging.$/;"	e	enum:logging_level
LOGGING_LEVEL_ERROR	inc/json/logging.h	/^  LOGGING_LEVEL_ERROR,    \/\/!< ERROR logging.$/;"	e	enum:logging_level
LOGGING_LEVEL_INFO	inc/json/logging.h	/^  LOGGING_LEVEL_INFO,     \/\/!< INFO logging.$/;"	e	enum:logging_level
LOGGING_LEVEL_WARNING	inc/json/logging.h	/^  LOGGING_LEVEL_WARNING,  \/\/!< WARNING logging.$/;"	e	enum:logging_level
LOW	inc/Arduino.h	32;"	d
LOW	inc/wiring.h	35;"	d
LSBFIRST	inc/wiring.h	50;"	d
MISO	inc/pins_arduino.h	/^static const uint8_t MISO = PIN_SPI_MISO;$/;"	v
MOSI	inc/pins_arduino.h	/^static const uint8_t MOSI = PIN_SPI_MOSI;$/;"	v
MPin	inc/Device.h	/^struct MPin {$/;"	s
MSBFIRST	inc/wiring.h	51;"	d
MUX_PINS	inc/Device.h	17;"	d
MicrobitSimulator	utils/gui.py	/^class MicrobitSimulator(object):$/;"	c
NUM_ANALOG_INPUTS	inc/pins_arduino.h	29;"	d
NUM_ANALOG_PINS	inc/Device.h	19;"	d
NUM_DIGITAL_PINS	inc/pins_arduino.h	28;"	d
NUM_LEDS	inc/Device.h	18;"	d
NUM_PINS	inc/Device.h	16;"	d
OCT	inc/Arduino.h	36;"	d
OCT	inc/Print.h	30;"	d
OUTPUT	inc/wiring.h	38;"	d
PI	inc/wiring.h	41;"	d
PIN_A0	inc/pins_arduino.h	60;"	d
PIN_A1	inc/pins_arduino.h	61;"	d
PIN_A10	inc/pins_arduino.h	70;"	d
PIN_A11	inc/pins_arduino.h	71;"	d
PIN_A2	inc/pins_arduino.h	62;"	d
PIN_A3	inc/pins_arduino.h	63;"	d
PIN_A4	inc/pins_arduino.h	64;"	d
PIN_A5	inc/pins_arduino.h	65;"	d
PIN_A6	inc/pins_arduino.h	66;"	d
PIN_A7	inc/pins_arduino.h	67;"	d
PIN_A8	inc/pins_arduino.h	68;"	d
PIN_A9	inc/pins_arduino.h	69;"	d
PIN_SPI_MISO	inc/pins_arduino.h	50;"	d
PIN_SPI_MOSI	inc/pins_arduino.h	49;"	d
PIN_SPI_SCK	inc/pins_arduino.h	51;"	d
PIN_SPI_SS	inc/pins_arduino.h	48;"	d
PIN_WIRE_SCL	inc/pins_arduino.h	38;"	d
PIN_WIRE_SDA	inc/pins_arduino.h	37;"	d
PRESSED	inc/Esplora.h	/^const boolean PRESSED     = LOW;$/;"	v
PROGMEM	inc/avr/pgmspace.h	5;"	d
PSTR	inc/avr/pgmspace.h	8;"	d
Pin	inc/Device.h	/^struct Pin {$/;"	s
PinState	inc/Device.h	/^enum PinState {$/;"	g
Pins_Arduino_h	inc/pins_arduino.h	24;"	d
Print	inc/Print.h	/^class Print {$/;"	c
Print_h	inc/Print.h	21;"	d
RAD_TO_DEG	inc/wiring.h	45;"	d
RED_PIN	Esplora.cpp	/^const byte RED_PIN    = 5;$/;"	v
RELEASED	inc/Esplora.h	/^const boolean RELEASED    = HIGH;$/;"	v
RISING	inc/wiring.h	55;"	d
RXLED0	inc/pins_arduino.h	34;"	d
RXLED1	inc/pins_arduino.h	35;"	d
SCK	inc/pins_arduino.h	/^static const uint8_t SCK  = PIN_SPI_SCK;$/;"	v
SCL	inc/pins_arduino.h	/^static const uint8_t SCL = PIN_WIRE_SCL;$/;"	v
SDA	inc/pins_arduino.h	/^static const uint8_t SDA = PIN_WIRE_SDA;$/;"	v
SERIAL	inc/wiring.h	47;"	d
SERIAL_H_	inc/Serial.h	2;"	d
SERIAL_PORT_HARDWARE	inc/pins_arduino.h	321;"	d
SERIAL_PORT_HARDWARE_OPEN	inc/pins_arduino.h	322;"	d
SERIAL_PORT_MONITOR	inc/pins_arduino.h	319;"	d
SERIAL_PORT_USBVIRTUAL	inc/pins_arduino.h	320;"	d
SPCR	inc/wiring.h	137;"	d
SPDR	inc/wiring.h	136;"	d
SPIE	inc/wiring.h	139;"	d
SPIF	inc/wiring.h	140;"	d
SPSR	inc/wiring.h	138;"	d
SS	inc/pins_arduino.h	/^static const uint8_t SS   = PIN_SPI_SS;$/;"	v
STATUS_BAD	inc/json/status.h	/^  STATUS_BAD,           \/\/!< An unspecified error occurred.$/;"	e	enum:status
STATUS_DISCONNECTED	inc/json/status.h	/^  STATUS_DISCONNECTED,  \/\/!< A remote connection has disconnected.$/;"	e	enum:status
STATUS_EINVAL	inc/json/status.h	/^  STATUS_EINVAL,        \/\/!< An invalid value was provided.$/;"	e	enum:status
STATUS_ENOMEM	inc/json/status.h	/^  STATUS_ENOMEM,        \/\/!< A memory allocation failed.$/;"	e	enum:status
STATUS_OK	inc/json/status.h	/^  STATUS_OK,            \/\/!< Everything succeeded.$/;"	e	enum:status
SWITCH_1	inc/Esplora.h	/^const byte SWITCH_1       = 1;$/;"	v
SWITCH_2	inc/Esplora.h	/^const byte SWITCH_2       = 2;$/;"	v
SWITCH_3	inc/Esplora.h	/^const byte SWITCH_3       = 3;$/;"	v
SWITCH_4	inc/Esplora.h	/^const byte SWITCH_4       = 4;$/;"	v
SWITCH_DOWN	inc/Esplora.h	/^const byte SWITCH_DOWN    = SWITCH_1;$/;"	v
SWITCH_LEFT	inc/Esplora.h	/^const byte SWITCH_LEFT    = SWITCH_2;$/;"	v
SWITCH_RIGHT	inc/Esplora.h	/^const byte SWITCH_RIGHT   = SWITCH_4;$/;"	v
SWITCH_UP	inc/Esplora.h	/^const byte SWITCH_UP      = SWITCH_3;$/;"	v
Serial	Main.cpp	/^_Serial Serial;$/;"	v
SerialUSB	inc/pins_arduino.h	325;"	d
Stream	inc/Stream.h	/^class Stream : public Print$/;"	c
Stream_h	inc/Stream.h	18;"	d
String	WString.cpp	/^String::String(String &&rval) {$/;"	f	class:String
String	WString.cpp	/^String::String(StringSumHelper &&rval) {$/;"	f	class:String
String	WString.cpp	/^String::String(char c) {$/;"	f	class:String
String	WString.cpp	/^String::String(const String &value) {$/;"	f	class:String
String	WString.cpp	/^String::String(const char *cstr) {$/;"	f	class:String
String	WString.cpp	/^String::String(int value, unsigned char base) {$/;"	f	class:String
String	WString.cpp	/^String::String(long value, unsigned char base) {$/;"	f	class:String
String	WString.cpp	/^String::String(unsigned char value, unsigned char base) {$/;"	f	class:String
String	WString.cpp	/^String::String(unsigned int value, unsigned char base) {$/;"	f	class:String
String	WString.cpp	/^String::String(unsigned long value, unsigned char base) {$/;"	f	class:String
String	inc/WString.h	/^class String$/;"	c
StringIfHelper	inc/WString.h	/^  void StringIfHelper() const {}$/;"	f	class:String
StringSumHelper	inc/WString.h	/^  StringSumHelper(char c) : String(c) {}$/;"	f	class:StringSumHelper
StringSumHelper	inc/WString.h	/^  StringSumHelper(const String &s) : String(s) {}$/;"	f	class:StringSumHelper
StringSumHelper	inc/WString.h	/^  StringSumHelper(const char *p) : String(p) {}$/;"	f	class:StringSumHelper
StringSumHelper	inc/WString.h	/^  StringSumHelper(int num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	inc/WString.h	/^  StringSumHelper(long num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	inc/WString.h	/^  StringSumHelper(unsigned char num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	inc/WString.h	/^  StringSumHelper(unsigned int num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	inc/WString.h	/^  StringSumHelper(unsigned long num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	inc/WString.h	/^class StringSumHelper : public String$/;"	c
String_class_h	inc/WString.h	23;"	d
TWO_PI	inc/wiring.h	43;"	d
TXLED0	inc/pins_arduino.h	32;"	d
TXLED1	inc/pins_arduino.h	33;"	d
TX_RX_LED_INIT	inc/pins_arduino.h	31;"	d
ULTOA_H_	inc/ultoa.h	2;"	d
WARNING	inc/json/logging.h	49;"	d
WARNING0	inc/json/logging.h	50;"	d
WIRING_H_	inc/wiring.h	23;"	d
X_AXIS	inc/Esplora.h	/^const byte X_AXIS = 0;$/;"	v
Y_AXIS	inc/Esplora.h	/^const byte Y_AXIS = 1;$/;"	v
Z_AXIS	inc/Esplora.h	/^const byte Z_AXIS = 2;$/;"	v
_BV	inc/wiring.h	141;"	d
_Device	Device.cpp	/^_Device::_Device() {$/;"	f	class:_Device
_Device	inc/Device.h	/^class _Device {$/;"	c
_Esplora	Esplora.cpp	/^_Esplora::_Esplora() {$/;"	f	class:_Esplora
_Esplora	inc/Esplora.h	/^class _Esplora {$/;"	c
_Later	inc/Arduino.h	/^  _Later(int after, bool async, callable&& f, arguments&&... args) {$/;"	f	class:_sim::_Later
_Later	inc/Arduino.h	/^class _Later {$/;"	c	namespace:_sim
_Serial	inc/Serial.h	/^  _Serial() {}$/;"	f	class:_Serial
_Serial	inc/Serial.h	/^class _Serial : public Stream {$/;"	c
__PGMSPACE_H__	inc/avr/pgmspace.h	2;"	d
__init__	utils/gui.py	/^  def __init__(self, program_path=None, interactive=False):$/;"	m	class:MicrobitSimulator
__init__	utils/gui.py	/^  def __init__(self, stdscr, simulator):$/;"	m	class:CursesUI
__toa	ultoa.cpp	/^std::string __toa(T value, int base) {$/;"	f
__utoa	ultoa.cpp	/^std::string __utoa(T value, int base) {$/;"	f
_baud_rate	inc/Serial.h	/^  uint32_t _baud_rate = 9600;$/;"	m	class:_Serial
_buffer_append_n	json/buffer.c	/^_buffer_append_n(struct buffer *const buffer, const void *const new_bytes, const size_t new_nbytes) {$/;"	f	file:
_buffer_maybe_grow	json/buffer.c	/^_buffer_maybe_grow(struct buffer *const buffer, const size_t new_nbytes) {$/;"	f	file:
_countdown	inc/Device.h	/^  int64_t _countdown = 0;$/;"	m	struct:Pin
_device	Main.cpp	/^_Device _device;$/;"	m	namespace:_sim	file:
_interrupt_map	inc/Device.h	/^  std::array<int, 5> _interrupt_map = {{0, 1, 2, 3, 7}};$/;"	m	class:_Device
_is_analog	inc/Device.h	/^  bool _is_analog = false;$/;"	m	struct:Pin
_is_analog	inc/Device.h	/^  bool _is_analog = true;$/;"	m	struct:MPin
_is_output	inc/Device.h	/^  bool _is_output = false;$/;"	m	struct:Pin
_is_pwm	inc/Device.h	/^  bool _is_pwm = false;$/;"	m	struct:Pin
_is_tone	inc/Device.h	/^  bool _is_tone = false;$/;"	m	struct:Pin
_isr_table	inc/Device.h	/^  std::array<void (*)(void), 5> _isr_table;$/;"	m	class:_Device
_m_countdown	inc/Device.h	/^  std::mutex _m_countdown;$/;"	m	class:_Device
_m_mux	inc/Device.h	/^  std::mutex _m_mux;$/;"	m	class:_Device
_m_pins	inc/Device.h	/^  std::mutex _m_pins;$/;"	m	class:_Device
_micros_elapsed	inc/Device.h	/^  std::atomic<uint64_t> _micros_elapsed;$/;"	m	class:_Device
_mode	inc/Device.h	/^  uint8_t _mode = NAN;$/;"	m	struct:Pin
_mux_pins	inc/Device.h	/^  std::array<MPin, MUX_PINS> _mux_pins;$/;"	m	class:_Device
_output	inc/Device.h	/^  bool _output = false;$/;"	m	struct:Pin
_pin	inc/Device.h	/^  uint32_t _pin;$/;"	m	struct:MPin
_pin	inc/Device.h	/^  uint32_t _pin;$/;"	m	struct:Pin
_pins	inc/Device.h	/^  std::array<Pin, NUM_PINS> _pins;$/;"	m	class:_Device
_possible_bauds	inc/Serial.h	/^  const uint32_t _possible_bauds[12] = {300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200};$/;"	m	class:_Serial
_pwm_frequencies	inc/Device.h	/^  std::array<std::pair<int, int>, 7> _pwm_frequencies = {{ {3, 980}, {5, 490}, {6, 490}, {9,490}, {10,490}, {11,490}, {13,980} }};$/;"	m	class:_Device
_pwm_high_time	inc/Device.h	/^  uint32_t _pwm_high_time = 0;$/;"	m	struct:Pin
_pwm_period	inc/Device.h	/^  uint32_t _pwm_period = 0;$/;"	m	struct:Pin
_sim	Device.cpp	/^namespace _sim {$/;"	n	file:
_sim	Main.cpp	/^namespace _sim {$/;"	n	file:
_sim	inc/Arduino.h	/^namespace _sim {$/;"	n
_sim	inc/Device.h	/^namespace _sim {$/;"	n
_sim	inc/global_variables.h	/^namespace _sim {$/;"	n
_state	inc/Device.h	/^  PinState _state = GPIO_PIN_OUTPUT_LOW;$/;"	m	struct:Pin
_voltage	inc/Device.h	/^  float _voltage = 2.5;$/;"	m	struct:MPin
_voltage	inc/Device.h	/^  float _voltage = NAN;$/;"	m	struct:Pin
abs	inc/wiring.h	/^inline T abs (T x) {$/;"	f
abs	inc/wiring.h	71;"	d
analogRead	Arduino.cpp	/^int analogRead(int pin) {$/;"	f
analogReference	Arduino.cpp	/^void analogReference(uint8_t mode __attribute__((unused))) {$/;"	f
analogWrite	Arduino.cpp	/^void analogWrite(int pin, byte value) {$/;"	f
analog_pin_to_channel_PGM	inc/pins_arduino.h	/^const uint8_t PROGMEM analog_pin_to_channel_PGM[] = {$/;"	v
appendf	Main.cpp	/^appendf(char** str, const char* end, const char* format, ...) {$/;"	f	namespace:_sim
as	inc/json/json.h	/^  } as;                             \/\/!< A union for storage of the underlying value of this JSON value.$/;"	m	struct:json_value	typeref:union:json_value::__anon1
available	Serial.cpp	/^int _Serial::available() {$/;"	f	class:_Serial
begin	Serial.cpp	/^void _Serial::begin(unsigned long baud_rate) {$/;"	f	class:_Serial
begin	inc/WString.h	/^  char* begin() { return buffer; }$/;"	f	class:String
begin	inc/WString.h	/^  const char* begin() const { return c_str(); }$/;"	f	class:String
bitClear	inc/Arduino.h	125;"	d
bitRead	inc/Arduino.h	123;"	d
bitSet	inc/Arduino.h	124;"	d
bitWrite	inc/Arduino.h	126;"	d
boolean	inc/Arduino.h	/^typedef bool boolean;$/;"	t
boolean	inc/json/json.h	/^    bool boolean;                   \/\/!< A Boolean value used for JSON \\p true and \\p false values.$/;"	m	union:json_value::__anon1
buffer	inc/WString.h	/^  char *buffer;         \/\/ the actual char array$/;"	m	class:String
buffer	inc/json/buffer.h	/^struct buffer {$/;"	s
buffer_append	json/buffer.c	/^buffer_append(struct buffer *const buffer, const char *const str) {$/;"	f
buffer_append_n	json/buffer.c	/^buffer_append_n(struct buffer *const buffer, const void *const new_bytes, const size_t new_nbytes) {$/;"	f
buffer_append_printf	json/buffer.c	/^buffer_append_printf(struct buffer *const buffer, const char *const format, ...) {$/;"	f
buffer_clear	json/buffer.c	/^buffer_clear(struct buffer *const buffer) {$/;"	f
buffer_clear_n	json/buffer.c	/^buffer_clear_n(struct buffer *const buffer, const size_t nbytes) {$/;"	f
buffer_create	json/buffer.c	/^buffer_create(void) {$/;"	f
buffer_deinit	json/buffer.c	/^buffer_deinit(struct buffer *const buffer) {$/;"	f
buffer_destroy	json/buffer.c	/^buffer_destroy(struct buffer *const buffer) {$/;"	f
buffer_init	json/buffer.c	/^buffer_init(struct buffer *const buffer) {$/;"	f
buffer_reserve	json/buffer.c	/^buffer_reserve(struct buffer *const buffer, const size_t nbytes) {$/;"	f
byte	inc/Arduino.h	/^typedef uint8_t byte;$/;"	t
byte	inc/Esplora.h	/^typedef uint8_t byte;$/;"	t
c_str	inc/WString.h	/^  const char* c_str() const { return buffer; }$/;"	f	class:String
capacity	inc/WString.h	/^  unsigned int capacity;  \/\/ the array length minus one (for the '\\0')$/;"	m	class:String
changeBuffer	WString.cpp	/^unsigned char String::changeBuffer(unsigned int maxStrLen) {$/;"	f	class:String
charAt	WString.cpp	/^char String::charAt(unsigned int loc) const {$/;"	f	class:String
check_shutdown	Device.cpp	/^check_shutdown() {$/;"	f	namespace:_sim
check_suspend	Device.cpp	/^check_suspend() {$/;"	f	namespace:_sim
clockCyclesPerMicrosecond	inc/Arduino.h	116;"	d
clockCyclesToMicroseconds	inc/Arduino.h	117;"	d
code_thread_main	Main.cpp	/^code_thread_main() {$/;"	f
compareTo	WString.cpp	/^int String::compareTo(const String &s) const {$/;"	f	class:String
concat	WString.cpp	/^unsigned char String::concat(char c) {$/;"	f	class:String
concat	WString.cpp	/^unsigned char String::concat(const String &s) {$/;"	f	class:String
concat	WString.cpp	/^unsigned char String::concat(const char *cstr) {$/;"	f	class:String
concat	WString.cpp	/^unsigned char String::concat(const char *cstr, unsigned int length) {$/;"	f	class:String
concat	WString.cpp	/^unsigned char String::concat(int num) {$/;"	f	class:String
concat	WString.cpp	/^unsigned char String::concat(long num) {$/;"	f	class:String
concat	WString.cpp	/^unsigned char String::concat(unsigned char num) {$/;"	f	class:String
concat	WString.cpp	/^unsigned char String::concat(unsigned int num) {$/;"	f	class:String
concat	WString.cpp	/^unsigned char String::concat(unsigned long num) {$/;"	f	class:String
constrain	inc/wiring.h	/^inline T constrain(T amt, S low, S high) {$/;"	f
copy	WString.cpp	/^String & String::copy(const char *cstr, unsigned int length) {$/;"	f	class:String
count	program.cpp	/^int16_t count = 0;$/;"	v
cv_suspend	Main.cpp	/^std::condition_variable cv_suspend;$/;"	m	namespace:_sim	file:
data	inc/json/buffer.h	/^  char *data;$/;"	m	struct:buffer
default_pwm_period	Device.cpp	/^void _Device::default_pwm_period(int pin) {$/;"	f	class:_Device
degrees	inc/wiring.h	/^inline T degrees(T rad) {$/;"	f
delay	Arduino.cpp	/^void delay(uint32_t ms) {$/;"	f
delayMicroseconds	Arduino.cpp	/^void delayMicroseconds(uint32_t us) {$/;"	f
digitalPinHasPWM	Device.cpp	/^bool _Device::digitalPinHasPWM(int p) {$/;"	f	class:_Device
digitalPinToInterrupt	inc/Arduino.h	113;"	d
digitalPinToInterrupt	inc/pins_arduino.h	96;"	d
digitalPinToPCICR	inc/Arduino.h	104;"	d
digitalPinToPCICRbit	inc/Arduino.h	105;"	d
digitalPinToPCMSK	inc/Arduino.h	106;"	d
digitalPinToPCMSKbit	inc/Arduino.h	107;"	d
digitalRead	Arduino.cpp	/^int digitalRead(int pin) {$/;"	f
digitalWrite	Arduino.cpp	/^void digitalWrite(int pin, byte value) {$/;"	f
digital_pin_to_bit_mask_PGM	inc/pins_arduino.h	/^const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[] = {$/;"	v
digital_pin_to_port_PGM	inc/pins_arduino.h	/^const uint8_t PROGMEM digital_pin_to_port_PGM[] = {$/;"	v
digital_pin_to_timer_PGM	inc/pins_arduino.h	/^const uint8_t PROGMEM digital_pin_to_timer_PGM[] = {$/;"	v
dmap	Device.cpp	/^double dmap(double val, double x1, double x2, double y1, double y2) {$/;"	f
draw_buttons	utils/gui.py	/^  def draw_buttons(self):$/;"	m	class:CursesUI
draw_leds	utils/gui.py	/^  def draw_leds(self):$/;"	m	class:CursesUI
end	Serial.cpp	/^void _Serial::end() {$/;"	f	class:_Serial
end	inc/WString.h	/^  char* end() { return buffer + length(); }$/;"	f	class:String
end	inc/WString.h	/^  const char* end() const { return c_str() + length(); }$/;"	f	class:String
end	inc/json/lexer.h	/^  const char *end;    \/\/!< Pointer to the end of the input byte stream.$/;"	m	struct:lexer
endsWith	WString.cpp	/^unsigned char String::endsWith( const String &s2 ) const {$/;"	f	class:String
equals	WString.cpp	/^unsigned char String::equals(const String &s2) const {$/;"	f	class:String
equals	WString.cpp	/^unsigned char String::equals(const char *cstr) const {$/;"	f	class:String
equalsIgnoreCase	WString.cpp	/^unsigned char String::equalsIgnoreCase( const String &s2 ) const {$/;"	f	class:String
event	utils/gui.py	/^  def event(self, event):$/;"	m	class:MicrobitSimulator
file	json/logging.c	/^static FILE *file = NULL;$/;"	v	file:
file_needs_close	json/logging.c	/^static bool file_needs_close = false;$/;"	v	file:
flags	inc/WString.h	/^  unsigned char flags;    \/\/ unused, for future features$/;"	m	class:String
flush	Serial.cpp	/^void _Serial::flush() {$/;"	f	class:_Serial
focus_console	utils/gui.py	/^  def focus_console(self):$/;"	m	class:CursesUI
focus_microbit	utils/gui.py	/^  def focus_microbit(self):$/;"	m	class:CursesUI
getBytes	WString.cpp	/^void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const {$/;"	f	class:String
get_analog	Device.cpp	/^uint32_t _Device::get_analog(int pin) {$/;"	f	class:_Device
get_digital	Device.cpp	/^int _Device::get_digital(int pin) {$/;"	f	class:_Device
get_elapsed_micros	Main.cpp	/^get_elapsed_micros() {$/;"	f	namespace:_sim
get_micros	Device.cpp	/^uint64_t _Device::get_micros() {$/;"	f	class:_Device
get_mux_value	Device.cpp	/^int _Device::get_mux_value(int pin) {$/;"	f	class:_Device
get_mux_voltage	Device.cpp	/^double _Device::get_mux_voltage(int pin) {$/;"	f	class:_Device
get_pin_mode	Device.cpp	/^int _Device::get_pin_mode(int pin) {$/;"	f	class:_Device
get_pin_state	Device.cpp	/^PinState _Device::get_pin_state(int pin) {$/;"	f	class:_Device
get_pin_voltage	Device.cpp	/^double _Device::get_pin_voltage(int pin) {$/;"	f	class:_Device
get_pwm_high_time	Device.cpp	/^uint32_t _Device::get_pwm_high_time(int pin) {$/;"	f	class:_Device
get_pwm_period	Device.cpp	/^uint32_t _Device::get_pwm_period(int pin) {$/;"	f	class:_Device
handle_key	utils/gui.py	/^  def handle_key(self):$/;"	m	class:CursesUI
highByte	inc/Arduino.h	121;"	d
increment_counter	Device.cpp	/^increment_counter(int us) {$/;"	f	namespace:_sim
increment_counter	Device.cpp	/^void _Device::increment_counter(uint32_t us) {$/;"	f	class:_Device
indexOf	WString.cpp	/^int String::indexOf( char ch, unsigned int fromIndex ) const {$/;"	f	class:String
indexOf	WString.cpp	/^int String::indexOf(char c) const {$/;"	f	class:String
indexOf	WString.cpp	/^int String::indexOf(const String &s2) const {$/;"	f	class:String
indexOf	WString.cpp	/^int String::indexOf(const String &s2, unsigned int fromIndex) const {$/;"	f	class:String
init	WString.cpp	/^inline void String::init(void) {$/;"	f	class:String
interrupts	inc/wiring.h	122;"	d
invalidate	WString.cpp	/^void String::invalidate(void) {$/;"	f	class:String
isAlpha	inc/WCharacter.h	/^inline boolean isAlpha(int c)$/;"	f
isAlphaNumeric	inc/WCharacter.h	/^inline boolean isAlphaNumeric(int c) $/;"	f
isAnalogPin	Device.cpp	/^bool _Device::isAnalogPin(int p) {$/;"	f	class:_Device
isAscii	inc/WCharacter.h	/^inline boolean isAscii(int c)$/;"	f
isControl	inc/WCharacter.h	/^inline boolean isControl(int c)$/;"	f
isDigit	inc/WCharacter.h	/^inline boolean isDigit(int c)$/;"	f
isGraph	inc/WCharacter.h	/^inline boolean isGraph(int c)$/;"	f
isHexadecimalDigit	inc/WCharacter.h	/^inline boolean isHexadecimalDigit(int c)$/;"	f
isLowerCase	inc/WCharacter.h	/^inline boolean isLowerCase(int c)$/;"	f
isPrintable	inc/WCharacter.h	/^inline boolean isPrintable(int c)$/;"	f
isPunct	inc/WCharacter.h	/^inline boolean isPunct(int c)$/;"	f
isSpace	inc/WCharacter.h	/^inline boolean isSpace(int c)$/;"	f
isUpperCase	inc/WCharacter.h	/^inline boolean isUpperCase(int c)$/;"	f
isWhitespace	inc/WCharacter.h	/^inline boolean isWhitespace(int c)$/;"	f
is_tone	Device.cpp	/^bool _Device::is_tone(int pin) {$/;"	f	class:_Device
itoa	ultoa.cpp	/^char* itoa( int __val, char* __s, int __radix )$/;"	f
joyHighHalf	Esplora.cpp	/^bool _Esplora::joyHighHalf(byte joyCh) {$/;"	f	class:_Esplora
joyLowHalf	Esplora.cpp	/^bool _Esplora::joyLowHalf(byte joyCh) {$/;"	f	class:_Esplora
json_parse	json/json.c	/^json_parse(const char *const string) {$/;"	f
json_parse_n	json/json.c	/^json_parse_n(const char *const input, const size_t input_nbytes) {$/;"	f
json_value	inc/json/json.h	/^struct json_value {$/;"	s
json_value_append	json/json.c	/^json_value_append(struct json_value *const array, struct json_value *const value) {$/;"	f
json_value_create	json/json.c	/^json_value_create(const enum json_value_type type) {$/;"	f
json_value_destroy	json/json.c	/^json_value_destroy(struct json_value *const value) {$/;"	f
json_value_get	json/json.c	/^json_value_get(const struct json_value *object, const char *const key) {$/;"	f
json_value_list	inc/json/json.h	/^struct json_value_list {$/;"	s
json_value_set	json/json.c	/^json_value_set(struct json_value *const object, const char *const key, struct json_value *const value) {$/;"	f
json_value_set_n	json/json.c	/^json_value_set_n(struct json_value *const object, const char *const key, const size_t key_nbytes, struct json_value *const value) {$/;"	f
json_value_set_nocopy	json/json.c	/^json_value_set_nocopy(struct json_value *const object, char *const key, struct json_value *const value) {$/;"	f
json_value_type	inc/json/json.h	/^enum json_value_type {$/;"	g
json_write_escape_string	json/json.c	/^json_write_escape_string(struct buffer *const buffer, const char *const string) {$/;"	f
key	inc/json/json.h	/^  char *key;                     \/\/!< The key for a JSON object pair and \\p NULL for a JSON array.$/;"	m	struct:json_value_list
lastBlue	inc/Esplora.h	/^  byte lastBlue;$/;"	m	class:_Esplora
lastGreen	inc/Esplora.h	/^  byte lastGreen;$/;"	m	class:_Esplora
lastIndexOf	WString.cpp	/^int String::lastIndexOf( char theChar ) const {$/;"	f	class:String
lastIndexOf	WString.cpp	/^int String::lastIndexOf(char ch, unsigned int fromIndex) const {$/;"	f	class:String
lastIndexOf	WString.cpp	/^int String::lastIndexOf(const String &s2) const {$/;"	f	class:String
lastIndexOf	WString.cpp	/^int String::lastIndexOf(const String &s2, unsigned int fromIndex) const {$/;"	f	class:String
lastRed	inc/Esplora.h	/^  byte lastRed;$/;"	m	class:_Esplora
len	inc/WString.h	/^  unsigned int len;       \/\/ the String length (not counting the '\\0')$/;"	m	class:String
length	inc/WString.h	/^  inline unsigned int length(void) const {return len;}$/;"	f	class:String
lexer	inc/json/lexer.h	/^struct lexer {$/;"	s
lexer_consume	inc/json/lexer.h	62;"	d
lexer_consume_lws	json/lexer.c	/^lexer_consume_lws(struct lexer *const lex) {$/;"	f
lexer_consume_uint32	json/lexer.c	/^lexer_consume_uint32(struct lexer *const lex, uint32_t *const number) {$/;"	f
lexer_consume_ws	json/lexer.c	/^lexer_consume_ws(struct lexer *const lex) {$/;"	f
lexer_init	json/lexer.c	/^lexer_init(struct lexer *const lex, const char *const input, const size_t input_nbytes) {$/;"	f
lexer_memcmp	inc/json/lexer.h	68;"	d
lexer_nremaining	inc/json/lexer.h	74;"	d
lexer_peek	inc/json/lexer.h	80;"	d
lexer_strncmp	inc/json/lexer.h	86;"	d
lexer_upto	inc/json/lexer.h	92;"	d
line	preprocessor.py	/^    line = re.sub(k, v, line.rstrip())$/;"	v
list_to_json	Main.cpp	/^list_to_json(const char* field, char** json_ptr, char* json_end, int* values, size_t len) {$/;"	f	namespace:_sim
logging_close	json/logging.c	/^logging_close(void) {$/;"	f
logging_level	inc/json/logging.h	/^enum logging_level {$/;"	g
logging_log	json/logging.c	/^logging_log(const enum logging_level level, const char *const function_name, const char *const file_name, const int line_number, const char *const fmt, ...) {$/;"	f
logging_open	json/logging.c	/^logging_open(const char *const path) {$/;"	f
loop	program.cpp	/^void loop() {$/;"	f
lowByte	inc/Arduino.h	120;"	d
ltoa	ultoa.cpp	/^char* ltoa( long __val, char* __s, int __radix )$/;"	f
m_suspend	Main.cpp	/^std::mutex m_suspend;$/;"	m	namespace:_sim	file:
main	Main.cpp	/^main(int argc, char** argv) {$/;"	f
main	utils/gui.py	/^def main(stdscr):$/;"	f
main_thread	Main.cpp	/^main_thread() {$/;"	f
map	Arduino.cpp	/^int map(int x, int fromLow, int fromHigh, int toLow, int toHigh) {$/;"	f
max	inc/wiring.h	/^inline T max(T a, S b) {$/;"	f
memcpy_P	inc/avr/pgmspace.h	7;"	d
micros	Arduino.cpp	/^micros() {$/;"	f
microsecondsToClockCycles	inc/Arduino.h	118;"	d
millis	Arduino.cpp	/^unsigned long millis() {$/;"	f
min	inc/wiring.h	/^inline T min(T a, S b) {$/;"	f
move	WString.cpp	/^void String::move(String &rhs) {$/;"	f	class:String
my_func	program.cpp	/^int16_t my_func(  ) {$/;"	f
nbytes_allocd	inc/json/buffer.h	/^  size_t nbytes_allocd;$/;"	m	struct:buffer
nbytes_used	inc/json/buffer.h	/^  size_t nbytes_used;$/;"	m	struct:buffer
next	inc/json/json.h	/^  struct json_value_list *next;  \/\/!< The next pointer for the linked list.$/;"	m	struct:json_value_list	typeref:struct:json_value_list::json_value_list
next_update	utils/gui.py	/^  def next_update(self):$/;"	m	class:MicrobitSimulator
noInterrupts	inc/wiring.h	123;"	d
noTone	Arduino.cpp	/^void noTone(unsigned int pin) {$/;"	f
noTone	Esplora.cpp	/^void _Esplora::noTone() {$/;"	f	class:_Esplora
nremaining	inc/json/lexer.h	/^  size_t nremaining;  \/\/<! How many bytes are remaining in the input byte stream.$/;"	m	struct:lexer
number	inc/json/json.h	/^    double number;                  \/\/!< A 64-bit double-precision number used for JSON numbers.$/;"	m	union:json_value::__anon1
operator !=	inc/WString.h	/^  unsigned char operator != (const String &rhs) const {return !equals(rhs);}$/;"	f	class:String
operator !=	inc/WString.h	/^  unsigned char operator != (const char *cstr) const {return !equals(cstr);}$/;"	f	class:String
operator +	WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, char c) {$/;"	f
operator +	WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs) {$/;"	f
operator +	WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr) {$/;"	f
operator +	WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, int num) {$/;"	f
operator +	WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, long num) {$/;"	f
operator +	WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num) {$/;"	f
operator +	WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num) {$/;"	f
operator +	WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num) {$/;"	f
operator +=	inc/WString.h	/^  String & operator += (char c)     {concat(c); return (*this);}$/;"	f	class:String
operator +=	inc/WString.h	/^  String & operator += (const String &rhs)  {concat(rhs); return (*this);}$/;"	f	class:String
operator +=	inc/WString.h	/^  String & operator += (const char *cstr)   {concat(cstr); return (*this);}$/;"	f	class:String
operator +=	inc/WString.h	/^  String & operator += (int num)      {concat(num); return (*this);}$/;"	f	class:String
operator +=	inc/WString.h	/^  String & operator += (long num)     {concat(num); return (*this);}$/;"	f	class:String
operator +=	inc/WString.h	/^  String & operator += (unsigned char num)    {concat(num); return (*this);}$/;"	f	class:String
operator +=	inc/WString.h	/^  String & operator += (unsigned int num)   {concat(num); return (*this);}$/;"	f	class:String
operator +=	inc/WString.h	/^  String & operator += (unsigned long num)  {concat(num); return (*this);}$/;"	f	class:String
operator <	WString.cpp	/^unsigned char String::operator<(const String &rhs) const {$/;"	f	class:String
operator <=	WString.cpp	/^unsigned char String::operator<=(const String &rhs) const {$/;"	f	class:String
operator =	WString.cpp	/^String & String::operator = (String &&rval) {$/;"	f	class:String
operator =	WString.cpp	/^String & String::operator = (StringSumHelper &&rval) {$/;"	f	class:String
operator =	WString.cpp	/^String & String::operator = (const String &rhs) {$/;"	f	class:String
operator =	WString.cpp	/^String & String::operator = (const char *cstr) {$/;"	f	class:String
operator ==	inc/WString.h	/^  unsigned char operator == (const String &rhs) const {return equals(rhs);}$/;"	f	class:String
operator ==	inc/WString.h	/^  unsigned char operator == (const char *cstr) const {return equals(cstr);}$/;"	f	class:String
operator >	WString.cpp	/^unsigned char String::operator>(const String &rhs) const {$/;"	f	class:String
operator >=	WString.cpp	/^unsigned char String::operator>=(const String &rhs) const {$/;"	f	class:String
operator StringIfHelperType	inc/WString.h	/^  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }$/;"	f	class:String
operator []	WString.cpp	/^char & String::operator[](unsigned int index) {$/;"	f	class:String
operator []	WString.cpp	/^char String::operator[]( unsigned int index ) const {$/;"	f	class:String
pairs	inc/json/json.h	/^    struct json_value_list *pairs;  \/\/!< A linked list of pairs. Used for JSON objects and arrays.$/;"	m	union:json_value::__anon1	typeref:struct:json_value::__anon1::json_value_list
parse	json/json.c	/^parse(struct lexer *const lex, struct buffer *const buffer) {$/;"	f	file:
parse_array	json/json.c	/^parse_array(struct lexer *const lex, struct buffer *const buffer) {$/;"	f	file:
parse_hex4	json/json.c	/^parse_hex4(const char *hex4) {$/;"	f	file:
parse_number	json/json.c	/^parse_number(struct lexer *const lex) {$/;"	f	file:
parse_object	json/json.c	/^parse_object(struct lexer *const lex, struct buffer *const buffer) {$/;"	f	file:
parse_string	json/json.c	/^parse_string(struct lexer *const lex, struct buffer *const buffer) {$/;"	f	file:
peek	Serial.cpp	/^int _Serial::peek() {$/;"	f	class:_Serial
pgm_read_byte	inc/avr/pgmspace.h	/^inline uint8_t pgm_read_byte(const uint8_t* p) { return *p; }$/;"	f
pgm_read_dword	inc/avr/pgmspace.h	/^inline uint32_t pgm_read_dword(const uint32_t* p) { return *p; }$/;"	f
pinMode	Arduino.cpp	/^void pinMode(int pin, int mode) {$/;"	f
port_to_input_PGM	inc/pins_arduino.h	/^const uint16_t PROGMEM port_to_input_PGM[] = {$/;"	v
port_to_mode_PGM	inc/pins_arduino.h	/^const uint16_t PROGMEM port_to_mode_PGM[] = {$/;"	v
port_to_output_PGM	inc/pins_arduino.h	/^const uint16_t PROGMEM port_to_output_PGM[] = {$/;"	v
print	Print.cpp	/^void Print::print(char c, int base) {$/;"	f	class:Print
print	Print.cpp	/^void Print::print(const String &s) {$/;"	f	class:Print
print	Print.cpp	/^void Print::print(const char str[]) {$/;"	f	class:Print
print	Print.cpp	/^void Print::print(double n, int digits) {$/;"	f	class:Print
print	Print.cpp	/^void Print::print(int n, int base) {$/;"	f	class:Print
print	Print.cpp	/^void Print::print(long n, int base) {$/;"	f	class:Print
print	Print.cpp	/^void Print::print(unsigned char b, int base) {$/;"	f	class:Print
print	Print.cpp	/^void Print::print(unsigned int n, int base) {$/;"	f	class:Print
print	Print.cpp	/^void Print::print(unsigned long n, int base) {$/;"	f	class:Print
printFloat	Print.cpp	/^void Print::printFloat(double number, uint8_t digits) {$/;"	f	class:Print
printNumber	Print.cpp	/^void Print::printNumber(unsigned long n, uint8_t base) {$/;"	f	class:Print
println	Print.cpp	/^void Print::println(char c, int base) {$/;"	f	class:Print
println	Print.cpp	/^void Print::println(const String &s) {$/;"	f	class:Print
println	Print.cpp	/^void Print::println(const char c[]) {$/;"	f	class:Print
println	Print.cpp	/^void Print::println(double n, int digits) {$/;"	f	class:Print
println	Print.cpp	/^void Print::println(int n, int base) {$/;"	f	class:Print
println	Print.cpp	/^void Print::println(long n, int base) {$/;"	f	class:Print
println	Print.cpp	/^void Print::println(unsigned char b, int base) {$/;"	f	class:Print
println	Print.cpp	/^void Print::println(unsigned int n, int base) {$/;"	f	class:Print
println	Print.cpp	/^void Print::println(unsigned long n, int base) {$/;"	f	class:Print
println	Print.cpp	/^void Print::println(void) {$/;"	f	class:Print
process_client_event	Main.cpp	/^process_client_event(int fd) {$/;"	f	namespace:_sim
process_client_json	Main.cpp	/^process_client_json(const json_value* json) {$/;"	f	namespace:_sim
process_client_mux	Main.cpp	/^process_client_mux(const json_value* data) {$/;"	f	namespace:_sim
process_client_pins	Main.cpp	/^process_client_pins(const json_value* data) {$/;"	f	namespace:_sim
prog_char	inc/avr/pgmspace.h	/^typedef const char prog_char;$/;"	t
prog_uint8_t	inc/avr/pgmspace.h	/^typedef uint8_t prog_uint8_t;$/;"	t
push_button	utils/gui.py	/^  def push_button(self, b):$/;"	m	class:CursesUI
radians	inc/wiring.h	/^inline T radians(T deg) {$/;"	f
random	Arduino.cpp	/^long random(long lowerLimit, long upperLimit) {$/;"	f
random	Arduino.cpp	/^long random(long upperLimit) {$/;"	f
randomSeed	Arduino.cpp	/^void randomSeed(int seed) {$/;"	f
read	Serial.cpp	/^int _Serial::read() {$/;"	f	class:_Serial
readAccelerometer	Esplora.cpp	/^int _Esplora::readAccelerometer(byte axis) {$/;"	f	class:_Esplora
readBlue	Esplora.cpp	/^byte _Esplora::readBlue() {$/;"	f	class:_Esplora
readButton	Esplora.cpp	/^bool _Esplora::readButton(byte button) {$/;"	f	class:_Esplora
readGreen	Esplora.cpp	/^byte _Esplora::readGreen() {$/;"	f	class:_Esplora
readJoystickButton	Esplora.cpp	/^int _Esplora::readJoystickButton() {$/;"	f	class:_Esplora
readJoystickSwitch	Esplora.cpp	/^int _Esplora::readJoystickSwitch() {$/;"	f	class:_Esplora
readJoystickX	Esplora.cpp	/^int _Esplora::readJoystickX() {$/;"	f	class:_Esplora
readJoystickY	Esplora.cpp	/^int _Esplora::readJoystickY() {$/;"	f	class:_Esplora
readLightSensor	Esplora.cpp	/^int _Esplora::readLightSensor() {$/;"	f	class:_Esplora
readMicrophone	Esplora.cpp	/^int _Esplora::readMicrophone() {$/;"	f	class:_Esplora
readRed	Esplora.cpp	/^byte _Esplora::readRed() {$/;"	f	class:_Esplora
readSlider	Esplora.cpp	/^int _Esplora::readSlider() {$/;"	f	class:_Esplora
readTemperature	Esplora.cpp	/^int _Esplora::readTemperature(byte scale) {$/;"	f	class:_Esplora
readTinkerkitInput	Esplora.cpp	/^inline unsigned int readTinkerkitInput(byte whichInput) {$/;"	f
readTinkerkitInputA	Esplora.cpp	/^inline unsigned int readTinkerkitInputA() {$/;"	f
readTinkerkitInputB	Esplora.cpp	/^inline unsigned int readTinkerkitInputB() {$/;"	f
regex_map	preprocessor.py	/^regex_map = {r'\\bunsigned int\\b': r'uint16_t',$/;"	v
replace	WString.cpp	/^void String::replace(char find, char replace) {$/;"	f	class:String
replace	WString.cpp	/^void String::replace(const String& find, const String& replace) {$/;"	f	class:String
reserve	WString.cpp	/^unsigned char String::reserve(unsigned int size) {$/;"	f	class:String
run_code	Main.cpp	/^run_code() {$/;"	f
running	utils/gui.py	/^  def running(self):$/;"	m	class:MicrobitSimulator
send_input	utils/gui.py	/^  def send_input(self, c):$/;"	m	class:MicrobitSimulator
send_pin_update	Main.cpp	/^void send_pin_update() {$/;"	f	namespace:_sim
setCharAt	WString.cpp	/^void String::setCharAt(unsigned int loc, char c) {$/;"	f	class:String
set_countdown	Device.cpp	/^void _Device::set_countdown(int pin, uint32_t d) {$/;"	f	class:_Device
set_digital	Device.cpp	/^void _Device::set_digital(int pin, int level) {$/;"	f	class:_Device
set_input	Device.cpp	/^void _Device::set_input(int pin) {$/;"	f	class:_Device
set_mux_voltage	Device.cpp	/^void _Device::set_mux_voltage(int pin, double value) {$/;"	f	class:_Device
set_output	Device.cpp	/^void _Device::set_output(int pin) {$/;"	f	class:_Device
set_pin_mode	Device.cpp	/^void _Device::set_pin_mode(int pin, int mode) {$/;"	f	class:_Device
set_pin_state	Device.cpp	/^void _Device::set_pin_state(int pin, PinState state) {$/;"	f	class:_Device
set_pin_voltage	Device.cpp	/^void _Device::set_pin_voltage(int pin, int value) {$/;"	f	class:_Device
set_pullup_digwrite	Device.cpp	/^void _Device::set_pullup_digwrite(int pin, int value) {$/;"	f	class:_Device
set_pwm_high_time	Device.cpp	/^void _Device::set_pwm_high_time(int pin, uint32_t a_write) {$/;"	f	class:_Device
set_pwm_period	Device.cpp	/^void _Device::set_pwm_period(int pin, uint32_t period) {$/;"	f	class:_Device
set_tone	Device.cpp	/^void _Device::set_tone(int pin, uint32_t freq) {$/;"	f	class:_Device
setup	program.cpp	/^void setup() {}$/;"	f
setup_output_pipe	Main.cpp	/^setup_output_pipe() {$/;"	f	namespace:_sim
shiftIn	Arduino.cpp	/^int shiftIn(int dataPin __attribute__((unused)), int clockPin __attribute__((unused)), int bitOrder __attribute__((unused))) {$/;"	f
shiftOut	Arduino.cpp	/^void shiftOut(int dataPin __attribute__((unused)), int clockPin __attribute__((unused)), int bitOrder __attribute__((unused)), int value __attribute__((unused))) {$/;"	f
show_help	Main.cpp	/^void show_help(char *s) {$/;"	f
show_help	utils/gui.py	/^  def show_help(self):$/;"	m	class:CursesUI
sig_handler	Main.cpp	/^sig_handler(int s __attribute__((unused))) {$/;"	f
sleep_period	Arduino.cpp	/^const int sleep_period = 100; \/\/ sleep period in milliseconds$/;"	v
sq	inc/wiring.h	/^T sq(T x) {$/;"	f
start	utils/gui.py	/^  def start(self):$/;"	m	class:MicrobitSimulator
startsWith	WString.cpp	/^unsigned char String::startsWith( const String &s2 ) const {$/;"	f	class:String
startsWith	WString.cpp	/^unsigned char String::startsWith( const String &s2, unsigned int offset ) const {$/;"	f	class:String
status	inc/json/status.h	/^enum status {$/;"	g
string	inc/json/json.h	/^    char *string;                   \/\/!< A UTF-8 encoded string used for JSON strings.$/;"	m	union:json_value::__anon1
strlen_P	inc/avr/pgmspace.h	6;"	d
substring	WString.cpp	/^String String::substring( unsigned int left ) const {$/;"	f	class:String
substring	WString.cpp	/^String String::substring(unsigned int left, unsigned int right) const {$/;"	f	class:String
terminate	utils/gui.py	/^  def terminate(self):$/;"	m	class:MicrobitSimulator
this_is_my_really_really_long_function_name_that_i_shall_call_hello_there	program.cpp	/^uint32_t this_is_my_really_really_long_function_name_that_i_shall_call_hello_there(int x, int y, int z) {$/;"	f
toAscii	inc/WCharacter.h	/^inline int toAscii(int c)$/;"	f
toCharArray	inc/WString.h	/^  void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const$/;"	f	class:String
toInt	WString.cpp	/^long String::toInt(void) const {$/;"	f	class:String
toLowerCase	WString.cpp	/^void String::toLowerCase(void) {$/;"	f	class:String
toLowerCase	inc/WCharacter.h	/^inline int toLowerCase(int c)$/;"	f
toUpperCase	WString.cpp	/^void String::toUpperCase(void) {$/;"	f	class:String
toUpperCase	inc/WCharacter.h	/^inline int toUpperCase(int c)$/;"	f
toggle_button	utils/gui.py	/^  def toggle_button(self, b):$/;"	m	class:CursesUI
tone	Arduino.cpp	/^void tone(unsigned int pin, unsigned int freq) {$/;"	f
tone	Arduino.cpp	/^void tone(unsigned int pin, unsigned int freq, unsigned long duration) {$/;"	f
tone	Esplora.cpp	/^void _Esplora::tone(unsigned int freq) {$/;"	f	class:_Esplora
tone	Esplora.cpp	/^void _Esplora::tone(unsigned int freq, unsigned long duration) {$/;"	f	class:_Esplora
trim	WString.cpp	/^void String::trim(void) {$/;"	f	class:String
type	inc/json/json.h	/^  enum json_value_type type;        \/\/!< The type of this JSON value. Used to indicate which field of \\p as houses data.$/;"	m	struct:json_value	typeref:enum:json_value::json_value_type
ultoa	ultoa.cpp	/^char* ultoa( unsigned long __val, char* __s, int __radix )$/;"	f
update_leds	utils/gui.py	/^  def update_leds(self, leds):$/;"	m	class:CursesUI
updates_fd	Main.cpp	/^int updates_fd = -1;$/;"	m	namespace:_sim	file:
upto	inc/json/lexer.h	/^  const char *upto;   \/\/!< Pointer to where we are up to within the input byte stream.$/;"	m	struct:lexer
us_sleep_period	Arduino.cpp	/^const int us_sleep_period = sleep_period * 1000;$/;"	v
utoa	ultoa.cpp	/^char* utoa( unsigned int __val, char* __s, int __radix )$/;"	f
value	inc/json/json.h	/^  struct json_value *value;      \/\/!< The value for a JSON object pair and the value for a JSON array.$/;"	m	struct:json_value_list	typeref:struct:json_value_list::json_value
word	inc/wiring.h	/^typedef unsigned int word;$/;"	t
write	Print.cpp	/^void Print::write(const char *str) {$/;"	f	class:Print
write	Print.cpp	/^void Print::write(const uint8_t *buffer, size_t size) {$/;"	f	class:Print
write	Serial.cpp	/^void _Serial::write(uint8_t c) {$/;"	f	class:_Serial
writeBlue	Esplora.cpp	/^void _Esplora::writeBlue(byte blue) {$/;"	f	class:_Esplora
writeGreen	Esplora.cpp	/^void _Esplora::writeGreen(byte green) {$/;"	f	class:_Esplora
writeRGB	Esplora.cpp	/^void _Esplora::writeRGB(byte red, byte green, byte blue) {$/;"	f	class:_Esplora
writeRed	Esplora.cpp	/^void _Esplora::writeRed(byte red) {$/;"	f	class:_Esplora
write_console	utils/gui.py	/^  def write_console(self, c):$/;"	m	class:CursesUI
write_event_ack	Main.cpp	/^write_event_ack(const char* event_type, const char* ack_data_json) {$/;"	f	namespace:_sim
write_to_updates	Main.cpp	/^write_to_updates(const void* buf, size_t count) {$/;"	f	namespace:_sim
write_utf8	json/json.c	/^write_utf8(const uint32_t cp, struct buffer *const buffer) {$/;"	f	file:
xcalloc	inc/json/xmalloc.h	34;"	d
xmalloc	inc/json/xmalloc.h	35;"	d
~String	WString.cpp	/^String::~String() {$/;"	f	class:String
